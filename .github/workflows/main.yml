name: Actions Workflow
on: [push, pull_request]
jobs:
  nessus7:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_TOKEN }}

      # Setup docker image
      - name: Download the image
        run: docker pull ghcr.io/potatoqualitee/nessus:latest
      - name: Startup the container
        run: docker run -p 8834:8834 --hostname nessus --name nessus -d ghcr.io/potatoqualitee/nessus7:latest

      - name: Write nessus license from secrets to disk
        run: 'echo "$NLICENSE" > /tmp/nessus.license'
        shell: bash
        env:
          NLICENSE: ${{secrets.LICENSE}}

      # setup CA certificate trust on runner to emulate prod
      - name: Write CA Cert
        run: 'echo "$CACERT" > /tmp/cacert.pem'
        shell: bash
        env:
          CACERT: ${{secrets.CACERT}}
      - name: Trust the CA
        run: |
          sudo cp /tmp/cacert.pem /etc/ssl/certs/ca.crt
          sudo chmod 644 /etc/ssl/certs/ca.crt
          sudo update-ca-certificates

      # time to party
      - name: Set required PowerShell modules
        id: psmodulecache
        uses: potatoqualitee/psmodulecache@v1
        with:
          modules-to-cache: PSFramework, PoshRSJob
      - name: Setup PowerShell module cache
        id: cacher
        uses: actions/cache@v2
        with:
          path: ${{ steps.psmodulecache.outputs.modulepath }}
          key: ${{ steps.psmodulecache.outputs.keygen }}
      - name: Install required PowerShell modules
        if: steps.cacher.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          Set-PSRepository PSGallery -InstallationPolicy Trusted
          Install-Module ${{ steps.psmodulecache.outputs.needed }} -ErrorAction Stop
      - name: Initialize the nessus server with admin user and license
        shell: pwsh
        run: |
          Import-Module ./tentools.psd1
          $cred = New-Object -TypeName PSCredential -ArgumentList "admin", (ConvertTo-SecureString -String admin123 -AsPlainText -Force)
          $splat = @{
            ComputerName = "localhost"
            Credential = $cred
            EnableException = $true
            LicensePath = "/tmp/nessus.license"
          }
          Initialize-TenServer @splat
      - name: Sleep to give Nessus time to initialize
        shell: pwsh
        run: Start-Sleep 20
      - name: Run thing
        shell: pwsh
        run: |
          $cred = New-Object -TypeName PSCredential -ArgumentList "admin", (ConvertTo-SecureString -String admin123 -AsPlainText -Force)
            $splat = @{
                ComputerName         = "localhost"
                AcceptSelfSignedCert = $false
                Credential           = $cred
                EnableException      = $true
                Port                 = 8834
            }
          Connect-TenServer @splat
          $params = @{
            Path        = "/policies"
            Method      = "POST"
            ContentType = "application/json"
            Parameter   = '{"uuid":"bbd4f805-3966-d464-b2d1-0079eb89d69708c3a05ec2812bcf","settings":{"display_unreachable_hosts":"no","log_live_hosts":"yes","reverse_lookup":"no","allow_post_scan_editing":"yes","udp_scanner":"no","syn_scanner":"yes","syn_firewall_detection":"Automatic (normal)","tcp_scanner":"no","tcp_firewall_detection":"Automatic (normal)","portscan_range":"default","unscanned_closed":"no","wol_wait_time":"5","wol_mac_addresses":"","scan_netware_hosts":"no","scan_network_printers":"no","ping_the_remote_host":"yes","udp_ping":"no","icmp_ping":"yes","icmp_ping_retries":"2","icmp_unreach_means_host_down":"no","tcp_ping":"yes","tcp_ping_dest_ports":"built-in","arp_ping":"yes","fast_network_discovery":"no","test_local_nessus_host":"yes","discovery_mode":"Host enumeration","acls":[{"object_type":"policy","permissions":0,"type":"default"}],"description":"","name":"Test Policy"}}'
          }
          Invoke-TenRequest @params -Verbose
      - name: Run Pester tests
        shell: pwsh
        run: |
          ./tests/pester.ps1

  nessus8:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_TOKEN }}

      # Setup docker image
      - name: Download the image
        run: docker pull ghcr.io/potatoqualitee/nessus7:latest
      - name: Startup the container
        run: docker run -p 8834:8834 -p 2220:22 --hostname nessus --name nessus -d ghcr.io/potatoqualitee/nessus:latest

      - name: Write nessus license from secrets to disk
        run: 'echo "$NLICENSE" > /tmp/nessus.license'
        shell: bash
        env:
          NLICENSE: ${{secrets.LICENSE}}

      # setup CA certificate trust on runner to emulate prod
      - name: Write CA Cert
        run: 'echo "$CACERT" > /tmp/cacert.pem'
        shell: bash
        env:
          CACERT: ${{secrets.CACERT}}
      - name: Trust the CA
        run: |
          sudo cp /tmp/cacert.pem /etc/ssl/certs/ca.crt
          sudo chmod 644 /etc/ssl/certs/ca.crt
          sudo update-ca-certificates

      # time to party
      - name: Set required PowerShell modules
        id: psmodulecache
        uses: potatoqualitee/psmodulecache@v1
        with:
          modules-to-cache: PSFramework, PoshRSJob
      - name: Setup PowerShell module cache
        id: cacher
        uses: actions/cache@v2
        with:
          path: ${{ steps.psmodulecache.outputs.modulepath }}
          key: ${{ steps.psmodulecache.outputs.keygen }}
      - name: Install required PowerShell modules
        if: steps.cacher.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          Set-PSRepository PSGallery -InstallationPolicy Trusted
          Install-Module ${{ steps.psmodulecache.outputs.needed }} -ErrorAction Stop
      - name: Initialize the nessus server with admin user and license
        shell: pwsh
        run: |
          Import-Module ./tentools.psd1
          $cred = New-Object -TypeName PSCredential -ArgumentList "admin", (ConvertTo-SecureString -String admin123 -AsPlainText -Force)
          $splat = @{
            ComputerName = "localhost"
            Credential = $cred
            EnableException = $true
            LicensePath = "/tmp/nessus.license"
          }
          Initialize-TenServer @splat
      - name: Run Pester tests
        shell: pwsh
        run: |
          ./tests/pester.ps1
