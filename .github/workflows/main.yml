name: Actions Workflow
on: [push, pull_request]
jobs:
  run-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Prep directory permission for caching
        run: |
          sudo chown runner /var/lib/docker/overlay2
      # Download docker container
      - name: Setup Docker image cache
        id: dockercacher
        uses: actions/cache@v2
        with:
          path: |
            /var/lib/docker/overlay2/4ce7a3958c175e424a2b3af49628963156309929d5b30ef270713759de5312ed
            /var/lib/docker/overlay2/5d4dfed37744dc228d42c588bc0651a6ab3346d815148ff236f9e20450b8cc4a
            /var/lib/docker/overlay2/bb501c89e1a21377247fbfc8965725e61f157c14c2f09b033a32a4637633d9d5
            /var/lib/docker/overlay2/bc6ab981a6a45dcf62e5880ebe1f168999dd2a7d6143a146e1801d0753d32e78
            /var/lib/docker/overlay2/3c7a0e42fdd32e21fcd3b11d7b25541ee36997bb4dc1950b4d771b1c635e8523
            /var/lib/docker/overlay2/be233a35cd1daa4cd893b649f7af61b923ae9658841dcc63ae841a142f2ef746
          key: overlaydir1
      - name: Download the image if required
        if: steps.dockercacher.outputs.cache-hit != 'true'
        run: |
          docker pull sometheycallme/docker-nessus:latest
          docker image inspect sometheycallme/docker-nessus:latest

      # separate download and run just to see the timing
      - name: Startup the container
        run: |
          docker run -p 8834:8834 -p 2220:22 --hostname nessus --name nessus -d sometheycallme/docker-nessus:latest
      # setup nessus
      - name: Write nessus license from secrets to disk
        run: 'echo "$NLICENSE" > /tmp/nessus.license'
        shell: bash
        env:
          NLICENSE: ${{secrets.LICENSE}}
      # setup cert to emulate prod
      - name: Write CA Cert
        run: 'echo "$CACERT" > /tmp/cacert.pem'
        shell: bash
        env:
          CACERT: ${{secrets.CACERT}}
      - name: Write SSL Key
        run: 'echo "$SSLKEY" > /tmp/serverkey.pem'
        shell: bash
        env:
          SSLKEY: ${{secrets.SSLKEY}}
      - name: Write SSL Cert
        run: 'echo "$SSLCERT" > /tmp/servercert.pem'
        shell: bash
        env:
          SSLCERT: ${{secrets.SSLCERT}}
      - name: Trust the CA
        run: |
          sudo cp /tmp/cacert.pem /etc/ssl/certs/ca.crt
          sudo chmod 644 /etc/ssl/certs/ca.crt
          sudo update-ca-certificates
      - name: Copy certs to docker
        run: |
          docker cp /tmp/serverkey.pem nessus:/opt/nessus/var/nessus/CA/serverkey.pem
          docker cp /tmp/servercert.pem nessus:/opt/nessus/com/nessus/CA/servercert.pem

      # time to party
      - name: Set required PowerShell modules
        id: psmodulecache
        uses: potatoqualitee/psmodulecache@v1
        with:
          modules-to-cache: PSFramework, PoshRSJob
      - name: Setup PowerShell module cache
        id: cacher
        uses: actions/cache@v2
        with:
          path: ${{ steps.psmodulecache.outputs.modulepath }}
          key: ${{ steps.psmodulecache.outputs.keygen }}
      - name: Install required PowerShell modules
        if: steps.cacher.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          Set-PSRepository PSGallery -InstallationPolicy Trusted
          Install-Module ${{ steps.psmodulecache.outputs.needed }} -ErrorAction Stop
      - name: Initialize the nessus server with admin user and license
        shell: pwsh
        run: |
          Import-Module ./tentools.psd1
          Wait-TenServerReady -ComputerName localhost
          $cred = New-Object -TypeName PSCredential -ArgumentList "admin", (ConvertTo-SecureString -String admin123 -AsPlainText -Force)
          $splat = @{
            ComputerName = "localhost"
            AcceptSelfSignedCert = $false
            Credential = $cred
            EnableException = $true
            Port = 8834
            Path = "/tmp/nessus.license"
          }
          Initialize-TenServer @splat
          Wait-TenServerReady -ComputerName localhost
      - name: Run Pester tests
        shell: pwsh
        run: |
          ./tests/pester.ps1
      - name: Add more chown for caching
        run: |
          sudo chown -R runner /var/lib/docker/overlay2/4ce7a3958c175e424a2b3af49628963156309929d5b30ef270713759de5312ed
          sudo chown -R runner /var/lib/docker/overlay2/5d4dfed37744dc228d42c588bc0651a6ab3346d815148ff236f9e20450b8cc4a
          sudo chown -R runner /var/lib/docker/overlay2/bb501c89e1a21377247fbfc8965725e61f157c14c2f09b033a32a4637633d9d5
          sudo chown -R runner var/lib/docker/overlay2/bc6ab981a6a45dcf62e5880ebe1f168999dd2a7d6143a146e1801d0753d32e78
          sudo chown -R runner /var/lib/docker/overlay2/3c7a0e42fdd32e21fcd3b11d7b25541ee36997bb4dc1950b4d771b1c635e8523
          sudo chown -R runner /var/lib/docker/overlay2/be233a35cd1daa4cd893b649f7af61b923ae9658841dcc63ae841a142f2ef746
