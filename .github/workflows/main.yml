name: Actions Workflow
on: [push, pull_request]
jobs:
  run-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      # setup and run docker container
      - name: Download the container
        run: docker pull sometheycallme/docker-nessus:latest
      # separate download and run just to see the timing
      - name: Startup the container
        run: docker run -p 8834:8834 -p 2220:22 --hostname nessus --name nessus -d sometheycallme/docker-nessus:latest

      # setup nessus
      - name: Write nessus license from secrets to disk
        run: 'echo "$NLICENSE" > /tmp/nessus.license'
        shell: bash
        env:
          NLICENSE: ${{secrets.LICENSE}}
      # setup cert to emulate prod
      - name: Write CA Cert
        run: 'echo "$CACERT" > /tmp/cacert.pem'
        shell: bash
        env:
          CACERT: ${{secrets.CACERT}}
      - name: Write SSL Key
        run: 'echo "$SSLKEY" > /tmp/serverkey.pem'
        shell: bash
        env:
          SSLKEY: ${{secrets.SSLKEY}}
      - name: Write SSL Cert
        run: 'echo "$SSLCERT" > /tmp/servercert.pem'
        shell: bash
        env:
          SSLCERT: ${{secrets.SSLCERT}}
      - name: Trust the CA
        run: |
          sudo mkdir /usr/local/share/ca-certificates/ent
          sudo chmod 755 /usr/local/share/ca-certificates/ent
          sudo cp /tmp/cacert.pem /usr/local/share/ca-certificates/ent/cacert.pem
          sudo chmod 644 /usr/local/share/ca-certificates/ent/cacert.pem
          sudo update-ca-certificates
      - name: Copy certs to docker
        run: |
          docker cp /tmp/serverkey.pem nessus:/opt/nessus/var/nessus/CA/serverkey.pem
          docker cp /tmp/servercert.pem nessus:/opt/nessus/com/nessus/CA/servercert.pem
      - name: Change password for root so that we can test Set-TenCertificate
        run: |
          docker exec nessus echo -e "0Eff92c0eff92c\n0Eff92c0eff92c" '|' passwd
      - name: Enable ssh within the container for complete testing
        run: |
          # install ssh to test Set-TenCertificate
          docker exec nessus yum install -y openssh-server
          docker exec nessus ssh-keygen -P "" -t rsa -f /etc/ssh/ssh_host_rsa_key
          docker exec nessus ssh-keygen -P "" -t dsa -f /etc/ssh/ssh_host_dsa_key
          docker exec nessus ssh-keygen -P "" -t ecdsa -f /etc/ssh/ssh_host_ecdsa_key
          docker exec nessus ssh-keygen -P "" -t ed25519 -f /etc/ssh/ssh_host_ed25519_key
          docker exec nessus /usr/sbin/sshd -D &

      # time to party
      - name: Set required PowerShell modules
        id: psmodulecache
        uses: potatoqualitee/psmodulecache@v1
        with:
          modules-to-cache: PSFramework, Pester
      - name: Setup PowerShell module cache
        id: cacher
        uses: actions/cache@v2
        with:
          path: ${{ steps.psmodulecache.outputs.modulepath }}
          key: ${{ steps.psmodulecache.outputs.keygen }}
      - name: Install required PowerShell modules
        if: steps.cacher.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          Set-PSRepository PSGallery -InstallationPolicy Trusted
          Install-Module ${{ steps.psmodulecache.outputs.needed }} -ErrorAction Stop
      - name: Initialize the nessus server with admin user and license
        shell: pwsh
        run: |
          Import-Module ./tentools.psd1
          $cred = New-Object -TypeName PSCredential -ArgumentList "admin", (ConvertTo-SecureString -String admin123 -AsPlainText -Force)
          $splat = @{
            ComputerName = "localhost"
            AcceptSelfSignedCert = $false
            Credential = $cred
            EnableException = $true
            Port = 8834
            Path = "/tmp/nessus.license"
          }
          Initialize-TenServer @splat
          Wait-TenServerReady -ComputerName localhost
      - name: Run Pester tests
        shell: pwsh
        run: |
          ./tests/pester.ps1
